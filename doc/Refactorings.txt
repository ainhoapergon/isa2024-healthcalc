
Refactorings

1. Enum Gender
    - Name: Wrong type of variable for Gender.
    - Refactoring applied: Modifying the data type for a variable.
    - Type: Attribute refactoring.
    - Changes description:
        > A new enum called "Gender" was created.
        > Every 'm' char was changed to Gender.MALE and every 'w' char to Gender.FEMALE
        > All tests and the rest of the classes were adapted to use the new type.
    - Manual changes:
        > Create the "Gender" enum.
        > Change char to Gender in HealthCalc, HealthCalcImpl, HealthHospitalAdapter, and HealthCalcDecorator (including both the European and American versions).
        > Change char to Gender in the GUI (controller and main).
        > Add a new method in HealthHospitalAdapter to convert char gender into enum gender.

2. Person Interface
    - Name: Long parameter list
    - Refactoring applied: Removing parameters by creating an object.
    - Type: Class refactoring.
    - Changes description:
        > A new interface called "Person" was created.
        > A new class called "PersonImpl" was created with methods that return the person's parameters.
        > All tests and the rest of the classes were adapted to use the new object.
    - Manual changes:
        > Create the "Person" interface.
        > Create the "PersonImpl" class.
        > Replace every individual parameter with a new PersonImpl object in HealthCalc, HealthCalcImpl, HealthHospitalAdapter, and HealthCalcDecorator (both European and American versions).
        > Replace every individual parameter with a new object in the GUI (controller and main).
        > Replace every individual parameter with a new object in tests.

3. CardiovascularMetrics Interface
    - Name: Large interface
    - Refactoring applied: Interface Segregation
    - Type: Class refactoring.
    - Changes description:
        > A new interface called "CardiovascularMetrics" was created.
        > All tests and the rest of the classes were adapted to use the new interface.
    - Manual changes:
        > Create the "CardiovascularMetrics" interface.
        > Change the implementation in HealthCalcImpl to use CardiovascularMetrics instead of HealthCalc.
        > Rename the initial idealWeight() method to getIdealBodyWeight().

4. MetabolicMetrics Interface
    - Name: Large interface
    - Refactoring applied: Interface Segregation
    - Type: Class refactoring.
    - Changes description:
        > A new interface called "MetabolicMetrics" was created.
        > All tests and the rest of the classes were adapted to use the new interface.
    - Manual changes:
        > Create the "MetabolicMetrics" interface.
        > Change the implementation in HealthCalcImpl to use MetabolicMetrics instead of HealthCalc.